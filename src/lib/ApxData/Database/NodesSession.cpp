/*
 * APX Autopilot project <http://docs.uavos.com>
 *
 * Copyright (c) 2003-2020, Aliaksei Stratsilatau <sa@uavos.com>
 * All rights reserved
 *
 * This file is part of APX Ground Control.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#include "NodesSession.h"
#include "Database.h"

#include <App/AppDirs.h>

using namespace db::nodes;

Session::Session(QObject *parent, QString sessionName)
    : DatabaseSession(parent, "nodes", sessionName, {}, AppDirs::storage())
{
    new DBReqMakeTable(this,
                       "Node",
                       {
                           "key INTEGER PRIMARY KEY NOT NULL",
                           "uid TEXT NOT NULL UNIQUE",
                           "time INTEGER",  //time seen
                           "name TEXT",     //latest
                           "hardware TEXT", //latest
                           "version TEXT",  //latest
                       });
    new DBReqMakeIndex(this, "Node", "uid", true);
    new DBReqMakeIndex(this, "Node", "time", false);

    //Node dictionary
    new DBReqMakeTable(this,
                       "NodeDict",
                       {
                           "key INTEGER PRIMARY KEY NOT NULL",
                           "nodeID INTEGER NOT NULL",
                           "time INTEGER DEFAULT 0", //seen and synced
                           "hash TEXT",              //generated by mcu
                           "name TEXT",              //node name
                           "hardware TEXT",
                           "version TEXT",
                           "FOREIGN KEY(nodeID) REFERENCES Node(key) ON DELETE CASCADE",
                       });
    new DBReqMakeIndex(this, "NodeDict", "nodeID", false);
    new DBReqMakeIndex(this, "NodeDict", "time", false);
    new DBReqMakeIndex(this, "NodeDict", "hash", false);

    new DBReqMakeTable(this,
                       "NodeField",
                       {
                           // all field params together are unique
                           "key INTEGER PRIMARY KEY NOT NULL",
                           "name TEXT NOT NULL", //unique name, i.e. 'imu.ins.gyro'
                           "title TEXT",         //human readable title
                           "units TEXT",         //units of measure
                           "type TEXT NOT NULL", //group,byte,real,etc
                           "array INTEGER",
                       });
    new DBReqMakeIndex(this, "NodeField", "name,title,units,type,array", true);

    new DBReqMakeTable(this,
                       "NodeDictStruct",
                       {
                           "key INTEGER PRIMARY KEY NOT NULL",
                           "dictID INTEGER NOT NULL",
                           "fieldID INTEGER NOT NULL",
                           "fieldIndex INTEGER", //field order in dict
                           "FOREIGN KEY(dictID) REFERENCES NodeDict(key) ON DELETE CASCADE",
                           "FOREIGN KEY(fieldID) REFERENCES NodeField(key)",
                       });
    new DBReqMakeIndex(this, "NodeDictStruct", "dictID", false);
    new DBReqMakeIndex(this, "NodeDictStruct", "fieldID", false);
    new DBReqMakeIndex(this, "NodeDictStruct", "fieldIndex", false);

    new DBReqMakeTable(this,
                       "NodeFieldMeta",
                       {
                           // fields metadata cache
                           "key INTEGER PRIMARY KEY NOT NULL",
                           "name TEXT NOT NULL", // unique
                           "version INTEGER NOT NULL",
                           "meta TEXT NOT NULL",
                       });
    new DBReqMakeIndex(this, "NodeFieldMeta", "name", true);

    //Node parameters
    new DBReqMakeTable(this,
                       "NodeConf",
                       {
                           "key INTEGER PRIMARY KEY NOT NULL",
                           "nodeID INTEGER NOT NULL",
                           "dictID INTEGER NOT NULL",
                           "hash TEXT",    //sha1 of values
                           "time INTEGER", //seen time
                           "title TEXT",   //auto generated from labels
                           "FOREIGN KEY(nodeID) REFERENCES Node(key) ON DELETE CASCADE",
                           "FOREIGN KEY(dictID) REFERENCES NodeDict(key) ON DELETE CASCADE",
                       });
    new DBReqMakeIndex(this, "NodeConf", "nodeID", false);
    new DBReqMakeIndex(this, "NodeConf", "dictID", false);
    new DBReqMakeIndex(this, "NodeConf", "hash", true);
    new DBReqMakeIndex(this, "NodeConf", "time", false);

    new DBReqMakeTable(this,
                       "NodeConfValues",
                       {
                           "key INTEGER PRIMARY KEY NOT NULL",
                           "value TEXT",
                       });
    new DBReqMakeIndex(this, "NodeConfValues", "value", true);

    new DBReqMakeTable(this,
                       "NodeConfData",
                       {
                           "confID INTEGER NOT NULL",
                           "fieldID INTEGER NOT NULL",
                           "valueID INTEGER NOT NULL",
                           "subidx INTEGER",
                           "FOREIGN KEY(confID) REFERENCES NodeConf(key) ON DELETE CASCADE",
                           "FOREIGN KEY(fieldID) REFERENCES NodeDictStruct(key) ON DELETE CASCADE",
                           "FOREIGN KEY(valueID) REFERENCES NodeConfValues(key) ON DELETE CASCADE",
                       });
    new DBReqMakeIndex(this, "NodeConfData", "confID", false);
    new DBReqMakeIndex(this, "NodeConfData", "confID,fieldID,subidx", true);

    //Unit
    new DBReqMakeTable(this,
                       "Unit",
                       {
                           "key INTEGER PRIMARY KEY NOT NULL",
                           "uid TEXT",
                           "name TEXT",
                           "type TEXT",
                           "time INTEGER DEFAULT 0", //time seen
                       });
    new DBReqMakeIndex(this, "Unit", "uid,name,type", true);
    new DBReqMakeIndex(this, "Unit", "uid", false);
    new DBReqMakeIndex(this, "Unit", "name", false);
    new DBReqMakeIndex(this, "Unit", "type", false);
    new DBReqMakeIndex(this, "Unit", "time", false);

    //Unit nodes configs (commits)
    new DBReqMakeTable(this,
                       "UnitConf",
                       {
                           "key INTEGER PRIMARY KEY NOT NULL",
                           "hash TEXT NOT NULL UNIQUE", //sha1
                           "time INTEGER DEFAULT 0",    //time of snapshot
                           "title TEXT",                //auto generated
                           "unitID INTEGER NOT NULL",
                           "notes TEXT",
                           "FOREIGN KEY(unitID) REFERENCES Unit(key) ON DELETE CASCADE",
                       });
    new DBReqMakeIndex(this, "UnitConf", "hash", true);
    new DBReqMakeIndex(this, "UnitConf", "time", false);
    new DBReqMakeIndex(this, "UnitConf", "title", false);
    new DBReqMakeIndex(this, "UnitConf", "unitID", false);
    new DBReqMakeIndex(this, "UnitConf", "notes", false);

    new DBReqMakeTable(this,
                       "UnitConfData",
                       {
                           //assigns nodes to unit
                           "unitConfID INTEGER NOT NULL",
                           "nodeConfID INTEGER NOT NULL",
                           "FOREIGN KEY(unitConfID) REFERENCES UnitConf(key) ON DELETE CASCADE",
                           "FOREIGN KEY(nodeConfID) REFERENCES NodeConf(key) ON DELETE CASCADE",
                       });
    new DBReqMakeIndex(this, "UnitConfData", "unitConfID", false);
    new DBReqMakeIndex(this, "UnitConfData", "nodeConfID", false);
    new DBReqMakeIndex(this, "UnitConfData", "unitConfID,nodeConfID", true);
}

Request::Request()
    : DatabaseRequest(Database::instance()->nodes)
{}
